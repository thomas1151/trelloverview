{"version":3,"sources":["hooks/useFetch.js","components/listItem.js","hooks/useCustomMapData.js","render/loading.js","hooks/useGetData.js","views/selectPots.js","components/boardWithLists.js","hooks/useFetchList.js","views/selectLists.js","hooks/useSelectedItemToggle.js","render/renderModal.js","hooks/useLocalStorageManagedState.js","components/board.js","render/header.js","hooks/useLocalStorageTokenManagement.js","components/functions/getElementByProperty.js","components/functions/getListByProperty.js","render/card.js","components/card.js","render/boardOverview.js","render/boardAsListItem.js","components/functions/sortBoard.js","components/functions/propGenerators/boardAsListItemProps.js","components/boardSelection.js","components/functions/cleanUpByCompare.js","render/login.js","App.js","serviceWorker.js","index.js"],"names":["useFetch","url","depends","useState","data","setData","isLoading","setIsLoading","error","setError","a","fetch","response","json","useEffect","getData","Error","ListItem","props","callbacks","onClick","onSelected","isSelected","setIsSelected","fetchedData","fetchUrl","Fragment","renderFn","f","constructor","Object","assign","fetchName","initialPropsData","constructRenderData","onRemove","event","forEach","element","defaultAdditionalProps","useCustomMapData","mapFn","RenderC","additionalProps","map","x","key","id","Loading","className","defaultMapFn","arr","DefaultComponent","defaultRenderFn","SelectPots","renderListItem","renderListItemFn","pot","console","log","selected","style","background","color","name","newPot","d","date","Date","getTime","lists","toString","slice","setActivePots","activePots","concat","setCurrentPot","potRemoved","el","filter","e","potClicked","toggleSelectedPot","pots","isSelectedPotFn","onSubmit","preventDefault","target","potName","value","autoComplete","type","list","renderListItemProps","borderColor","selectColor","BoardWithLists","board","boardElementListItemClicked","i","listClickedFn","listData","p","selectedElementFn","currentPot","getCurrentPotFn","rel","href","parse","dateLastActivity","toLocaleString","defaultSourceFn","obj","defaultOutputFn","out","source","result","useFetchList","sourceFn","outputFn","asBulk","Promise","all","then","catch","err","SelectLists","find","listClicked","length","aP","isSelectedElementList","setSelectedElementList","cP","findIndex","item","selectedItem","setSelectedItem","isSelectedFn","toggleSelected","selectedState","useSelectedItemToggle","selectedBoards","ApiKey","ApiToken","boardsWithLists","boardsWithListsError","boardsWithListsIsLoading","renderedLists","boardSortFn","prevPots","selectedPotState","RenderModal","content","children","require","config","RenderBoardSettings","close","for","defaultValue","updateInterval","ref","inputRef","min","step","setUpdateInterval","current","Board","toLoad","setToLoad","showSettings","setShowSettings","prop","initialValue","localStorage","getItem","JSON","setItem","stringify","removeItem","stash","remove","isStashed","Boolean","useLocalStorageManagedState","stashUpdateInterval","updateIntervalRef","useRef","toLoadInterval","setInterval","clearInterval","undefined","navigator","onLine","results","biggestLength","r","sort","b","pos","l","vals","push","cards","newPots","some","passedProps","renderHeaderFn","stages","stage","setStage","stageAsTitle","logOut","restart","indexOf","getElementByProperty","property","getListByProperty","renderCardFn","card","labels","label","Card","idList","idBoard","renderOverview","RenderBoard","sortBoard","boardProps","bProps","BoardSelection","boardClicked","setSelectedBoards","renderComponent","customMapData","useGetData","boardsFetch","cleanUpByCompare","sourceItemsArr","outputItemsArr","sourceProperty","outputProperty","outputItem","found","RenderSettings","htmlFor","apiRef","Login","setKey","fetchData","onBlur","handleProgressStage","App","potsCleaned","setPotsCleaned","potsCleanup","process","token","setToken","revoke","cleanupFns","fn","useLocalStorageTokenManagement","replace","charAt","toUpperCase","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33c5f1da.chunk.js","sourcesContent":["//found at the useful: https://www.valentinog.com/blog/hooks/\n\nimport { useState, useEffect } from \"react\";\n\n/**\n * Little fetch hook with data error and loading.\n * Only interesting tidbit is there is an 'error' string returned if there is no URL passed.\n * This is useful if you're using it with other hooks that just always loop.\n * @param {string} url the url we're fetching from.\n */\nexport default function useFetch(url, depends = []) {\n\n    const [data, setData] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    async function getData() {\n\n        setIsLoading(true);\n        setError(null);\n        setData([]);\n        try {\n            const response = await fetch(url); //let's wait for us to get our response;\n            // console.log(\"fetching from \"+url)\n            const data = await response.json();\n            setData(data);\n            setIsLoading(false);\n        } catch (error) {\n            setError(error);\n            setIsLoading(false);\n\n        }\n    }\n\n    //Using the useEffect hook from React, the\n    // [] means the effect depends on nothing, so it only needs to run\n    // once.\n    useEffect(() => {\n        if (url) {\n            getData();\n        } else {\n            setError( Error('WARN: No URL Passed'));\n        }\n    }, depends)\n\n    return { data, error, isLoading };\n}","import React from 'react';\nimport { useState } from \"react\";\nimport useFetch from '../hooks/useFetch';\n\n/**\n * Generic ListItem controller. Allows support for selecting/removing, as well\n * as the custom render function that is passed in props.\n * If a fetchUrl is passed in props, the list item can maintain this too and passes it to any\n * render function it executes.\n * \n * The render function can of course be another component, so you can have nested list items.\n * Maybe renderFn should be changed to a more appropriate name... \n * @param {Object} props \n * @param {Object} callbacks \n */\nfunction ListItem(props, callbacks={onClick: [], onSelected:[]}) {\n\n    //Give ListItems a selected state.\n    const [isSelected, setIsSelected] = useState(props.isSelected ? props.isSelected : false);\n\n    //This is never used and can be expensive. Maybe remove?\n    let fetchedData = useFetch(props.fetchUrl);\n\n    /**\n     * So we have this merging function, if we need to make way for any fetched data, we move the data \n     * THIS component has gotten (props.data) into an initialPropsData key, so the fetched data gets key instead.\n     */\n    const constructRenderData = () => {\n        let f = fetchedData.data ? fetchedData.data : fetchedData;\n        return(props.data.constructor === Object ? Object.assign(props.data, { [props.fetchName]: f }) : Object.assign(f, {initialPropsData:props.data}));\n    }\n\n    /**\n     * Callbacks for onSelected.\n     * @param {*} event \n     */\n    function onSelected(event){\n        callbacks.onSelected.forEach(element => {\n            element(props.data);\n        });\n    }\n\n    /**\n     * Callbacks for onRemove.\n     * @param {*} event \n     */\n    function onRemove(event) {\n        callbacks.onRemove.forEach(element => {\n            element(props.data);\n        });\n    }\n\n    /**\n     * When we're clicking, this is the baby we want to be fired.\n     * @param {*} event \n     */\n    function onClick(event){\n        //We haven't changed the selectedState yet and we can't reliably check it after we've changed it\n        //due to the async nature, so we just check to see if it isn't selected yet, and then fire the\n        //isSelected logic.\n        if(!isSelected){\n            onSelected(event);\n        }\n\n        //We don't know how many ListItems this is descendant from - it's possible there's a whole chain of\n        //callbacks we might need to fire, so we do that here.\n        callbacks.onClick.forEach(element => {\n            element(props.data);\n        });\n\n        //Finally we need to toggle whatever the selected state - this is only mainainted internally.\n        setIsSelected(!isSelected);\n    }\n    return (\n        <React.Fragment>\n            {props.renderFn(constructRenderData(), {onRemove:onRemove, onClick:onClick, isSelected: props.isSelected, props: props})}\n        </React.Fragment>\n    );\n}\n\nexport default ListItem;\n","import React from 'react';\n\nconst defaultAdditionalProps = () => (undefined);\n\n/**\n * Mapping hook which allows us to render a component (RenderC - controller) with the\n * view from RenderFn. additionalProps are given too, and these are unpacked and given to the renderComponent.\n * Once the render component has those props, it can do whatever it wants with it. Consume it, pass it to the renderFn (and call another Component (controller))\n * if needs be.\n * \n *  @param {arr} data the data we're iterating over.\n *  @param {function} mapFn if we need to perform some kind of translation on the data before we map, here is the spot (we have this 'cuz it's a hook innit)\n *  @param {Component} RenderC the React component that is responsible for the logic, and controls the rendering.\n *  @param {function} RenderFn this is the view we pass to the component - our 'preference' for what we want the view to be - RenderC may not follow this (or may wrap etc)!\n *  @param {Object} additionalProps any props that the RenderC may want. It could then pass it to RenderFn or something.\n */\nconst useCustomMapData = (data, mapFn, RenderC, renderFn, additionalProps = defaultAdditionalProps) =>\n    (mapFn(data).map((x) => (<RenderC key={x.id} renderFn={renderFn} data={x} {...additionalProps(x)} />)))\n\nexport default useCustomMapData;\n","import React from 'react';\n\nconst Loading = () => (\n    <div className=\"w-full\">\n        <div className=\"lds-dual-ring\"/>\n    </div>\n)\n\nexport default Loading; \n\n","import React from 'react';\nimport useCustomMapData from \"./useCustomMapData\";\nimport Loading from '../render/loading';\n\nconst defaultMapFn = (arr) => (arr)\nconst DefaultComponent = (props) => (<div>{props.renderFn(props.data)}</div>)\nconst defaultRenderFn = (x) => <div className={\"id-\"+x.id}>{x.id}</div>;\nexport default function useGetData(error, isLoading, data, renderComponent = DefaultComponent, renderFn = defaultRenderFn, mapFn = defaultMapFn, additionalProps) {\n    const customMapData = useCustomMapData(data, mapFn, renderComponent, renderFn, additionalProps);\n\n    return (\n        error ?\n            error.toString()\n            :\n            (isLoading ?\n                <Loading />\n                :\n                <React.Fragment>\n                    {customMapData}\n                </React.Fragment>\n            )\n    );\n}\n","\n// https://api.trello.com/1/boards/{idBoard}?key={yourKey}&token={yourToken}\n\nimport React from 'react';\nimport ListItem from '../components/listItem';\nimport useCustomMapData from '../hooks/useCustomMapData';\n\n\n\nfunction SelectPots(props) {\n    const newPotForm = (e) => {\n        e.preventDefault();\n        newPot(e.target.potName.value);\n    }\n\n\n    const defaultRenderListItem = (pot, { onClick = () => (console.log(\"Default click\")), isSelected, onRemove } = {}) => {\n        return (\n            <div className=\"pot\" onClick={onClick} >\n                <div className={\" py-2 px-4 hover:bg-blue-400 text-left border-t border-b border-gray-300 py-3 rounded flex \" + (pot.selected && 'text-white')} style={pot.selected ? {background: '#'+pot.color} : {}}>\n                    <p className=\"flex-1\">{pot.name}</p>\n                    <button onClick={onRemove} className={\" font-light px-2 rounded border-gray-100 deg45 font-bold text-xl select-none\" + (pot.selected ? 'text-white' : 'text-gray-700')}>+</button>\n\n                </div>\n            </div>\n        )\n    }\n\n    //Unpack our needed props.\n    const renderListItem = props.renderListItemFn ? props.renderListItemFn : defaultRenderListItem;\n    \n    const setCurrentPot = (el) => (\n        props.setCurrentPot && props.setCurrentPot(el)\n    )\n\n    const setActivePots = (el) => {\n\n        props.setActivePots(el);\n    }\n    const newPot = (name) => {\n        let d = {};\n        d.date = new Date();\n        d.name = name;\n        d.id = d.date.getTime() + d.name;\n        d.lists = [];\n        d.selected = true;\n        d.color = d.date.getTime().toString().slice(-6);\n        props.setActivePots(props.activePots.concat([d])    );\n        props.setCurrentPot(d);\n        // return d;\n    }\n    // console.log(props.activePots);\n    // console.log(props.activePots.concat([newPot('to do')]));\n    const activePots = props.activePots;\n    \n\n\n    const potRemoved = (el) => { console.log(el);  props.setActivePots(activePots.filter( (e) => e !== el))};\n\n\n    const potClicked = (el) => { props.toggleSelectedPot && props.toggleSelectedPot(el); props.setCurrentPot && props.setCurrentPot(el)}\n\n    // const potClicked = (el) => {  }\n    const PotsListItem = (props) => ListItem(props, { 'onClick': [potClicked], 'onSelected': [], 'onRemove' : [potRemoved] });\n\n\n    const pots = useCustomMapData(activePots, (a) => (a), PotsListItem, renderListItem, (a) =>  ( {isSelected: props.isSelectedPotFn(a)} ));\n\n    return (\n        <React.Fragment>\n            {pots}\n            < div className=\"list flex \" >\n                <form className={\"py-2 px-4 text-left border-t border-b border-gray-300 py-3 self-end flex justify-center w-full\"} onSubmit={newPotForm}>\n                    <input name=\"potName\" className=\"flex-1 max-w-full bg-white focus:outline-none focus:shadow-outline border border-gray-300 rounded-lg py-2 px-4 leading-normal\" autoComplete=\"off\" />\n                    <button className=\"flex-0 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" type=\"submit\">+</button>\n\n                </form>\n            </div >\n        </React.Fragment>\n\n    )\n}\n\nexport default SelectPots;\n","import React from 'react';\nimport ListItem from '../components/listItem';\n\nimport useCustomMapData from '../hooks/useCustomMapData';\nimport { useState } from \"react\";\n\n\nconst renderListItem = (list, renderListItemProps) => (\n\n        <div className=\"list\" onClick={renderListItemProps.onClick} >\n            <p className={\"hover:text-blue-500 hover:border-blue-500 text-left rounded my-3 py-3 px-4  border-t-2 border-b-2 border-l-8 border-r-2 \" + (!renderListItemProps.isSelected && 'border-gray-300')} \n                style={{ borderColor: (renderListItemProps.isSelected ? '#' +renderListItemProps.props.selectColor : '')}}>\n                    {list.name}\n            </p>\n        </div>\n    )\n\n\n/**\n    * Some horrible mix of logic and view, needs splitting out into a selectable listItem and then the render methods.\n    * @param {*} board \n    * @param {*} optionalParams innit. \n    */\nexport default function BoardWithLists(board, { onClick = () => (console.log(\"Default click\")), isSelected, props } = {}) {\n\n    function boardElementListItemClicked(i){\n        props.listClickedFn(i);\n    }\n\n    const BoardElementListItem = (props) => ListItem(props, { 'onClick': [boardElementListItemClicked], 'onSelected': [] });\n\n    const aProps = (x) => {\n        let p = { isSelected: false };\n        if (props.selectedElementFn){\n            if(props.selectedElementFn(x) >= 0){\n                p.isSelected = true;\n            }\n        }\n        let currentPot = props.getCurrentPotFn();\n        // console.log(currentPot);\n        p.selectColor = (currentPot ? currentPot.color : '000000');\n        return p;\n    }\n\n    const listData = useCustomMapData(board.lists ? board.lists : [], (a) => (a), BoardElementListItem, renderListItem, aProps );\n\n    return (\n        <div className=\"flex outer boardCard w-full sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6 mb-4 self-stretch\" key={board.id} >\n            <div className={\"inner p-2 border-2  m-1 bg-white w-full\"} onClick={onClick} >\n                <h2 className=\"font-medium\">{board.name}</h2>\n                <div className=\"last-active\" className=\"font-book text-blue-700\"><a target=\"_blank\" rel=\"noopener noreferrer\" href={board.url}>{new Date(Date.parse(board.dateLastActivity)).toLocaleString()}</a></div>\n                {listData}\n            </div>\n        </div>\n    )\n};\n","//found at the useful: https://www.valentinog.com/blog/hooks/\n\nimport { useState, useEffect } from \"react\";\n\n/**\n * Function to fetch from a list. \n * \n * @param {*} arr \n * \n */\nconst defaultSourceFn = (obj) => (obj);\nconst defaultOutputFn = (obj, out) => Object.assign({ source: obj }, { result: out });\n\n/**\n * Function to take a list and do a fetch for every value.\n * This currently only returns values if NONE fail, so be careful when making your calls.\n * If there's a chance one may fail then maybe don't use this.\n * sourceFn and outputFn have defaults. SourceFn just assumes each is a string it can fetch from.\n * outputFn will assume \n * @param {Object}      obj      source object we'll be taking data from. Since we optionally process it this can be anything. \n * @param {?function}    sourceFn This fn should retrieve the fetch URL from the object given or the out of processFn(obj), \n * @param {?function}    outputFn This fn should be used in conjuction with isBulk to either retrieve the data from each \n *                                fetch response json, or from the whole array once completed.\n * @param {Boolean}     asBulk   should we call outputFn after all requests (true) or after each (false) \n * @param {?string[]}    depends  variables which if changed should force a fetch update. \n */\nexport default function useFetchList(obj = [], sourceFn = defaultSourceFn, outputFn = defaultOutputFn, asBulk = false, depends = []) {\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState();\n    const [data, setData] = useState(obj);\n    async function getData() {\n        setIsLoading(true);\n        setData([]);\n        await Promise.all(\n\n            obj.map(async x => {\n                // console.log(obj);\n                return fetch(sourceFn(x))\n                    .then(function (response) {\n                        return response.json();\n                    }).then(function (json) {\n                        if (!asBulk) {\n                            let out = outputFn(x, json)\n                            return out;\n                        }\n                        return json;\n                    })\n            })\n        ).then(d => {\n            setIsLoading(false);\n            if (asBulk) {\n                d = outputFn(data, d);\n            }\n            setData(d);\n            return d;\n\n        }).catch((err) => {\n            setError(err);\n        });\n    }\n\n\n    //Using the useEffect hook from React, the\n    // [] means the effect depends on nothing, so it only needs to run\n    // once.\n    useEffect(() => {\n        getData()\n    }, depends)\n\n    return { data, error, isLoading };\n}\n","// https://api.trello.com/1/boards/{idBoard}?key={yourKey}&token={yourToken}\n\nimport React from 'react';\nimport ListItem from '../components/listItem';\n\nimport useCustomMapData from '../hooks/useCustomMapData';\nimport { useState, useEffect } from \"react\";\nimport useSelectedItemToggle from '../hooks/useSelectedItemToggle';\nimport SelectPots from './selectPots';\nimport BoardWithLists from '../components/boardWithLists';\nimport useFetchList from '../hooks/useFetchList';\nimport Loading from '../render/loading';\n\nfunction SelectLists(props) {\n\n\n    const ListsOfBoardListItem = (props) => ListItem(props, { 'onClick': [], 'onSelected': [] });\n    const activePots = props.activePots;\n    const setActivePots = props.setActivePots;\n    function getCurrentPotFn() {\n        if(activePots){\n            let a = activePots.find((el) => (\n                 el.selected\n            ))\n            // console.log(a);\n            //console.log(activePots);\n            return a;\n\n        }\n    }\n\n    const listClicked = (id) => {\n        // console.log(id);\n        setSelectedElementList(id);\n        //console.log(activePots);\n    }\n\n    /**\n     * Returns index if true, false if false. Can be evaluated as boolean too.\n     * @param {Object} pot to evaluate \n     */\n    function isSelectedElementList(el) {\n        let cP = getCurrentPotFn();\n        //  console.log(\"This one has been called tho\");\n        if (cP){ \n            // console.log(cP);\n            // console.log(el);\n            let r = cP.lists ? cP.lists.findIndex((e) => (el.id === e.id)) : false; \n            // console.log(r, el);\n            return r;\n\n        }\n        else{\n            return(-1);\n        }    \n    }\n\n    function setSelectedElementList(el){\n        \n        // console.log(activePots);\n        if(activePots && activePots.length > 0){\n            // console.log(activePots);\n            let aP = activePots.map((x) => {\n                // console.log(x);\n                if (x.selected == true) {\n                    if (isSelectedElementList(el) >= 0) {\n                        console.log(\"removing!\");\n                        //TODO: make this variable, not necess id?\n                        x.lists = x.lists.filter((e) => e.id !== el.id);\n                    } else {\n                        console.log(\"adding!\");\n                        x.lists = x.lists.concat([el]);\n                    }\n                }\n                return x;\n\n            })\n            console.log(aP);\n            setActivePots(aP);\n        }\n\n            \n    }\n        \n    \n\n    \n    const boardWithListProps = (x) => {\n        let additionalProps = {};\n        // additionalProps.fetchUrl = 'https://api.trello.com/1/boards/' + x.id + '/lists/?key=' + props.ApiKey + '&token=' + props.ApiToken;\n        // additionalProps.fetchName = 'lists';\n        additionalProps.listClickedFn = listClicked;\n        additionalProps.activePots = activePots;\n        additionalProps.selectedElementFn = isSelectedElementList;\n        additionalProps.getCurrentPotFn = getCurrentPotFn;\n        // console.log(x);\n        return  additionalProps;\n    }\n\n    // const boardsWithLists = ;\n\n\n    /**\n     * I think this edits the state without using set? Not sure :(\n     * @param {*} el \n     */\n    const sCurrentPot = (el) => {\n        setActivePots(prevPots => prevPots.map((p) => {\n            //console.log(p);\n            if (p === el) {\n                p.selected = true;\n            } else {\n                p.selected = false;\n            }\n            return p;\n        }))\n\n\n    }\n\n    const { toggleSelected: toggleSelectedPot, isSelectedFn: isSelectedPotFn, } = useSelectedItemToggle();\n\n\n     \n    //Keeping this as a member of state prevents reloads when the selectPots require it.\n    // let renderedLists = useCustomMapData(props.selectedBoards, props.boardSortFn, ListsOfBoardListItem, BoardWithLists, boardWithListProps);\n    // let ls = useFetchList()\n    console.log(props.selectedBoards);\n    const { data:boardsWithLists, error:boardsWithListsError, isLoading:boardsWithListsIsLoading} = useFetchList(\n            props.selectedBoards, \n            (board) => ('https://api.trello.com/1/boards/' + board.id + '/lists/?key=' + props.ApiKey + '&token=' + props.ApiToken),\n            (board, lists) => {board.lists = lists; return board },\n            false,\n            [props.selectedBoards] \n            )\n\n    console.log(boardsWithLists);\n    console.log(boardsWithListsIsLoading);\n    let renderedLists = useCustomMapData(boardsWithLists[0] ? (boardsWithLists[0].lists ? boardsWithLists : []) :[], props.boardSortFn, ListsOfBoardListItem, BoardWithLists, boardWithListProps)\n    // console.log(renderedLists);\n    return(\n        \n            <div className=\"flex w-full flex-wrap\">\n                <aside className=\"pots w-full sm:w-1/5 p-2 border-r border-gray-300 bg-white rounded  self-start p-2 border-2 m-1\">\n                    <SelectPots \n                        setCurrentPot={sCurrentPot} \n                        currentPot={ getCurrentPotFn} \n                        activePots={activePots} \n                        setActivePots={setActivePots}\n                        toggleSelectedPot={toggleSelectedPot} //\n                        isSelectedPotFn={isSelectedPotFn} //\n                        selectedPotState={ getCurrentPotFn} //\n                        />\n                </aside>\n                <main className=\"flex-1 flex flex-wrap\">\n                    {getCurrentPotFn() ? \n                        boardsWithListsIsLoading ? \n                            <Loading/>\n\n                            :\n                            boardsWithListsError?\n                                <div>error</div>\n                                :\n                                (boardsWithLists.length > 0 ?\n                                    // <div>lists with {boardsWithLists.length}</div>\n                                    <React.Fragment>\n                                        {renderedLists}\n                                    </React.Fragment>\n                                    :\n                                    <div>No lists!</div>\n                                )\n                        \n                    :\n                        <div className=\"self-center text-center w-full text-lg font-bold text-gray-600\">{activePots.length > 0 ?  \"Please select an existing pot or create a new one.\" : \"Please create a pot to get started.\"}</div>\n                    }\n                </main>\n            </div>\n\n    )\n\n}\n\nexport default SelectLists;\n","import { useState } from \"react\";\n\n\nexport default function useSelectedItemToggle(item) {\n    const [selectedItem, setSelectedItem] = useState(item || null);\n    const isSelected = (el) => (selectedItem === el)\n\n    const toggleSelectedItem = (el) => {\n        isSelected(el) ? setSelectedItem('') : setSelectedItem(el);\n    }\n\n    return { isSelectedFn: isSelected, toggleSelected: toggleSelectedItem, selectedState: [selectedItem, setSelectedItem] };\n}\n\n","import React from 'react';\n\nexport default function RenderModal(props){\n    return(\n        <div className=\"absolute flex-1 self-center flex w-full h-full\">\n            <div className=\"absolute w-full h-full bg-gray-700  opacity-50 z-0\">\n\n            </div>\n            <div className=\"bg-white flex-0 self-center p-8 pb-4 rounded w-full sm:w-1/3 z-10 mx-auto\">\n                <div className>\n                    {props.content && props.content}\n                    {props.children && props.children}\n                </div>\n            </div>\n        </div>  \n    )\n\n}","/**\n * @author Thomas Barratt\n * @email tb@thomasbarratt.co.uk\n * @create date 2019-09-18 13:51:50\n * @modify date 2019-09-18 13:51:50\n * @desc Hook to allow for localStorage to manage abritrary data.\n */\n\nimport React, { useEffect, useState } from 'react';\nrequire('dotenv').config();\n\n/**\n * Uses localStorage to store arbitrary data. \n */\nexport default function useLocalStorageManagedState(prop, initialValue) {\n\n    const [key, setKey] = useState( prop );\n    const [data, setData] = useState(localStorage.getItem(prop) && JSON.parse(localStorage.getItem(prop)) || initialValue );\n\n    useEffect(() => {\n        data ?\n            localStorage.setItem(key, JSON.stringify(data))\n            :\n            localStorage.removeItem(key)\n    }, [data])\n\n    /**\n     * Remove token from state, therefore localStorage. \n     * @param {arr[Function]} cleanupFns (optional) any cleanup functions you want executing will be done here. \n     */\n    const remove = () => {\n        //Remove that token!\n        setData();\n        return true;\n    }\n\n    /**\n     * Store our token in our state, which prompts an update in localStorage\n     * @param {string} token \n     */\n    const stash = (d) => {\n        setData(d);\n    }\n\n    /**\n     * converts our token to a bool, useful for checks.\n     */\n    const isStashed = (Boolean(data))\n\n    return { stash, remove, isStashed, data }\n}\n","import React from 'react';\nimport { useState, useRef, useEffect } from \"react\";\nimport RenderModal from '../render/renderModal';\nimport useLocalStorageManagedState from '../hooks/useLocalStorageManagedState';\n\n\nconst RenderBoardSettings = (props) => (\n    <div className=\"text-left\">\n        <div className=\"text-lg text-gray-700 font-bold pb-4 flex\">\n            <h2 className=\"flex-1\">Edit overview  settings </h2>\n            <button onClick={props.close} className={\"align-right font-light px-2 rounded border-gray-100 deg45 font-bold text-xl select-none\"}>+</button>\n        </div>\n        <div className=\"flex-1\">\n            <label  className=\"w-full self-center pt-4 text-left text-gray-500 font-bold\"\n                    for=\"updateInterval\">Update Interval</label>\n            <input\n                className=\"flex-1 max-w-full bg-white focus:outline-none border border-gray-300 rounded-lg py-2 px-4 leading-normal\" \n                type=\"number\" \n                name=\"updateInterval\"\n                defaultValue={props.updateInterval / 1000}  ref={props.inputRef}\n                min=\"15000\" step=\"15000\"\n                />s\n        </div>\n\n        <button \n            className=\"hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-2 border border-blue-500 hover:border-transparent rounded my-4\"\n            type=\"button\" onClick={(e) => { e.preventDefault(); props.setUpdateInterval(props.inputRef.current.value * 1000); props.close(); }}>\n            Save\n        </button>\n    </div>\n)\n/**\n * Board logic. \n * @param {*} props \n */\nfunction Board(props) {\n\n    const [isSelected, setIsSelected] = useState(props.isSelected ? props.isSelected : false);\n    const [error, setError] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [toLoad, setToLoad] = useState(true);\n    const [showSettings, setShowSettings] = useState(false);\n    const { stash: stashUpdateInterval, remove: removeUpdateInterval, isStashed: isUpdateIntervalStashed, data: updateInterval } = useLocalStorageManagedState('trelloUpdateInterval', 60000);\n    const updateIntervalRef = useRef(null);\n\n    \n    const getData = () => {\n\n\n        if (props.activePots && props.activePots[0] !== undefined && navigator.onLine) {\n\n            setIsLoading(true);\n            // wait for nested requests to fulfill\n            Promise.all(props.activePots.map(async (pot) => { // Notice callback is async\n                await Promise.all(pot.lists.map(async (list) => {\n                    return (fetch('https://api.trello.com/1/lists/' + list.id + '/cards/?key=' + props.ApiKey + '&token=' + props.ApiToken)\n                        .then(function (response) {\n                            return response.json();\n                        })\n                    )\n                })).then( function (results){\n                    let out = []\n                    let biggestLength = 0;\n                    let r = results.map( (list) => {\n                        biggestLength = list.length > biggestLength ? list.length: biggestLength;\n                        return (list.sort( (a,b) => a.pos > b.pos));\n                    })\n\n                    for (let l = 0; l < biggestLength; l++) {\n                        let vals = []\n                        for (let i = 0; i < r.length; i++) {\n                            r[i] && r[i][l]  && vals.push(r[i][l])\n                        }\n                        out = out.concat(vals.sort((a, b) => new Date(b.dateLastActivity) - new Date(a.dateLastActivity)));\n\n                    }\n                    pot.cards = out\n                })\n                return pot;\n            })).then(newPots => {\n   \n                setIsLoading(false);\n                setToLoad(false);\n                console.log(newPots)\n                if(newPots.some( (pot) => (pot.cards.length > 0))){\n                    props.setActivePots(newPots);\n                }\n            }).catch((err) => {\n                console.log(err)\n                // setIsLoading(true);\n\n                props.setActivePots(props.activePots);\n                setError(err);\n            });\n\n        }\n    }\n\n    /**\n     * Let's get all the cards on load.\n     * get the cards from the pot-lists, and add them to the pot\n     */\n    useEffect(() => {\n        \n        let toLoadInterval = !isLoading && setInterval(() => setToLoad(true), updateInterval)\n\n        // this will clear Timeout when component unmont like in willComponentUnmount\n        return () => {\n            clearInterval(toLoadInterval)\n        }\n        \n    }, [toLoad, updateInterval]);\n\n    useEffect(() => {\n        if(toLoad){\n            getData()\n        }\n    }, [toLoad])\n   \n\n    /**\n     * Construct the necessary properties to pass to any children this may create.\n     */\n    const constructRenderData = () => {\n        let p = Object.assign({},props);\n        p.lists = [];\n        p.isLoading = isLoading;\n        p.error = error;\n        return p;\n    }\n\n    /**\n     * For all your onSelected callbacks, loop through them here and call them as required.\n     * @param {*} event \n     */\n    function onSelected(event) {\n        props.callbacks && props.callbacks.onSelected.forEach(element => {\n            element(props.data);\n        });\n    }\n\n    /**\n     * For all your onRemove callbacks, loop through them here and call them as required.\n     * @param {*} event\n     */\n    function onRemove(event) {\n        props.callbacks && props.callbacks.onRemove.forEach(element => {\n            element(props.data);\n        });\n    }\n\n    /**\n    * For all your onClick callbacks, loop through them here and call them as required.\n    * @param {*} event\n    */\n    function onClick(event) {\n        if (!isSelected) {\n            onSelected(event);\n        }\n        props.callbacks && props.callbacks.onClick.forEach(element => {\n            element(props.data);\n        });\n        setIsSelected(!isSelected);\n    }\n\n    /**\n     * We return the render function given in props, along with the looping callback handlers we've defined above, as well as the props we've constructed for\n     * the renderFn AND as a backup the props we've passed to this element.\n     */\n    return (\n        <React.Fragment>\n            <div className=\"absolute bottom-0 right-0 text-xl select-none\" onClick={ () => setShowSettings(!showSettings)}>\n                ⚙️\n            </div>\n            {props.renderFn(constructRenderData(), { onRemove: onRemove, onClick: onClick, isSelected: props.isSelected, passedProps: props })}\n            {showSettings && <RenderModal content={<RenderBoardSettings close={() => setShowSettings(!showSettings)} updateInterval={updateInterval} inputRef={updateIntervalRef} setUpdateInterval={stashUpdateInterval}/>} />}\n        </React.Fragment>\n    );\n}\n\nexport default Board;\n","import React from 'react';\n\nconst renderHeaderFn = (stages,  stage, setStage, stageAsTitle, logOut, restart) => (\n    <header className=\"bg-blue-500 px-4 flex w-full\">\n        <h1 className=\"text-lg font-bold text-left text-white flex-1 self-center\">{stageAsTitle}</h1>\n        <div className=\"flex flex-wrap  px-2\">\n            {stages.indexOf(stage) > 0 &&\n                <div className=\"button-wrap\">\n                    <button id=\"logoutButton\"  className=\"text-white border-white hover:bg-blue-700 font-semibold py-1 px-4 border hover:border-blue-500 hover:border-transparent rounded mx-2 my-1\"\n                        onClick={() => logOut()}>\n                        Logout\n                    </button>\n\n                    <button id=\"restartButton\"  className=\"text-white border-white hover:bg-blue-700 font-semibold py-1 px-4 border hover:border-blue-500 hover:border-transparent rounded mx-2 my-1\"\n                        onClick={() => restart()}>\n                        Restart\n                    </button>\n                    {stages.indexOf(stage) > 1  &&\n                        <button id=\"backButton\" className=\"text-white border-white hover:bg-blue-700  font-semibold py-1 px-4 border hover:border-blue-500 hover:border-transparent rounded mx-2 my-1\"\n                            onClick={() => (setStage(stages[stages.indexOf(stage) - 1]))}>\n                            Back\n                        </button>\n                    }\n                </div>\n            }\n        </div>\n    </header>\n);\nexport default renderHeaderFn;\n\n\n","/**\n * @author Thomas Barratt\n * @email tb@thomasbarratt.co.uk\n * @create date 2019-09-18 13:51:50\n * @modify date 2019-09-18 13:51:50\n * @desc Hook to allow for localStorage management for tokens.\n */\n\nimport React, { useEffect, useState } from 'react';\nrequire('dotenv').config();\n\n/**\n * Uses localStorage to store a key and token. The key is either already defined in localStorage or in the .env file which is included in the project.\n * Other developers wanting to change API key should look for the REACT_APP_API_KEY in .env.\n * Revoke, Stash, isStashed do as they would suggest.\n */\nexport default function useLocalStorageTokenManagement() {\n\n    const [key, setKey] = useState(localStorage.getItem('trelloKey') || process.env.REACT_APP_API_KEY);\n    const [token, setToken] = useState(localStorage.getItem('trelloToken'));\n\n    useEffect(() => {\n        token ?\n            localStorage.setItem('trelloToken', token) : localStorage.removeItem('trelloToken')\n    }, [token])\n\n    useEffect(() => {\n        key ?\n            localStorage.setItem('trelloKey', key) : setKey(process.env.REACT_APP_API_KEY);\n    }, [key])\n\n\n    /**\n     * Remove token from state, therefore localStorage. \n     * @param {arr[Function]} cleanupFns (optional) any cleanup functions you want executing will be done here. \n     */\n    const revoke = (cleanupFns = []) => {\n        //Remove that token!\n        setToken();\n\n        //In case any cleanups were passed.\n        cleanupFns.forEach((fn) => fn());\n    }\n\n    /**\n     * Store our token in our state, which prompts an update in localStorage\n     * @param {string} token \n     */\n    const stash = (token) => {\n        setToken(token);\n    }\n\n    /**\n     * converts our token to a bool, useful for checks.\n     */\n    const isStashed = (Boolean(token))\n\n    return { stash, revoke, isStashed, token, key, setKey }\n}\n","/**\n * Gets an element by source to look at, property and value given. Returns first if multiple.\n */\nconst getElementByProperty = (source, property, value) => (source.find((e) => e[property] === value) || {})\n\nexport default getElementByProperty;","/**\n * @author Thomas Barratt\n * @email tb@thomasbarratt.co.uk\n * @create date 2019-09-20 13:26:07\n * @modify date 2019-09-20 13:26:07\n * @desc  getListByProperty\n */\n/**\n * Gets a list from a pots array by property and value given. Returns first if multiple.\n */\nconst getListByProperty = (pots, property, value) => {\n    for (let i = 0; i < pots.length; i++) {\n        let r = pots[i].lists.find(((e) => e[property] === value));\n        if (r) {\n            return r;\n        }\n    }\n}\n\nexport default getListByProperty;","import React, { useEffect } from 'react';\n\nconst renderCardFn = (card, list, board) => (\n    <div className=\"card px-4 text-left border-t border-b border-gray-300 py-3 flex flex-row flex-wrap\" key={card.id} >\n\n        <div className=\"card-header flex-1 flex\">\n            <div className=\"flex flex-1 flex-wrap\">\n                <p className=\"w-full font-semibold py-0\">{card.name}</p>\n                <div className=\"w-full text-gray-800 text-sm\">{new Date(card.dateLastActivity).toLocaleString()} | {list.name} from {board.name}</div>\n            </div>\n            <a target=\"_blank\" rel=\"noopener noreferrer\"  className=\"self-center hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-2 border border-blue-500 hover:border-transparent rounded mx-2 border-box text-sm\" href={card.url}>View</a>\n        </div>\n        <div className=\"w-full\">\n            <div className=\"labels py-2 flex rounded-lg\">\n                {card.labels.map((label, i) => \n                    <div key={label.id ? label.id: i} \n                    className={\"flex pr-3 border rounded-lg font-medium text-sm leading-none border-l-8 \" + (i > 0 && 'mx-2')} \n                    style={{ borderColor: label.color }}>\n                        <p className=\"pl-1 py-1 text-xs\">{label.name}</p>\n                    </div>\n                )}\n            </div>\n        </div>\n\n    </div>\n);\nexport default renderCardFn;\n","import getElementByProperty from './functions/getElementByProperty'\nimport getListByProperty from './functions/getListByProperty'\nimport renderCardFn from  '../render/card'\n\nconst Card = (props) => {\n    let list = getListByProperty(props.activePots, 'id', props.card.idList);\n    let board = list && getElementByProperty(props.selectedBoards, 'id', list.idBoard);\n\n    if(board){\n        return renderCardFn(props.card, list, board)\n    }else{\n        return null;\n    }\n}\n\nexport default Card;","import React from 'react';\nimport getElementByProperty from '../components/functions/getElementByProperty'\nimport Card from '../components/card'\nimport Loading from '../render/loading'\n\nconst renderOverview = (props, { onClick = () => (console.log(\"Default click\")), isSelected }) => (\n    <div className=\"board flex flex-1 overflow-auto mx-2 w-full\">\n        {props.activePots.map((pot) => (\n            <div className=\"flex outer boardCard w-full flex-1 mb-4 mx-1 self-stretch\" key={pot.id} >\n                <div className={\"text-left inner flex flex-col p-2 border-2  m-1 bg-white w-full  \" + (isSelected ? 'border-orange-400 ' : ' border-gray-200 ')} onClick={onClick} >\n                    <div className=\"mx-4\">\n                        <div className=\" w-full py-1 flex\">\n                            <div className=\"font-bold text-lg\">{pot.name}</div>\n                            {pot.cards && pot.cards.length > 0 && props.isLoading && <div className=\"inline-block border border-blue-700 rounded px-3 ml-2\">Updating</div>}\n                        </div >\n                        <div className=\"font-book text-blue-700 pb-4 text-sm  max-h-10vh overflow-auto\">\n                            {pot.lists && pot.lists.map((list) => {\n                                let board = getElementByProperty(props.selectedBoards, 'id', list.idBoard);\n                                return (\n                                    <div className=\"hover:bg-blue-500 hover:text-white card inline-block border border-blue-700 rounded px-3 my-1 mr-2\" key={list.id + pot.id} >\n                                        <a target=\"_blank\" rel=\"noopener noreferrer\" href={board.url} className={\"\"}>{list.name} from <span className=\"max-w-xs\">{board.name.length > 20 ? board.name.slice(0, 25) + \"...\" : board.name}</span></a>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                    <div className=\"cardList overflow-auto w-full\">\n\n                        { \n                            pot.cards && pot.cards.length > 0?\n                                    pot.cards.map((card) => (\n                                        <Card key={card.id} card={card} selectedBoards={props.selectedBoards} activePots={props.activePots} />\n                                    ))\n                                :\n                                props.isLoading ? \n                                    <Loading/>\n                                    :\n                                    <div className=\"text-center\">No cards to display.</div>\n                            \n                        }\n\n\n\n\n                    </div>\n\n                </div>\n            </div>\n        ))}\n    </div>\n)\n\nexport default renderOverview;","import React from 'react';\n\n/**\n * Renders a board, showing name and last activity date.\n * @param {Object} board\n */\nconst RenderBoard = (board, { onClick = () => (console.log(\"Default click\")), isSelected } = {}) => (\n    <div className=\"flex outer boardCard w-full sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6 mb-4 self-stretch \" key={board.id} >\n        <div className={\"inner p-2 border-2  m-1 bg-white w-full \" + (isSelected ? 'border-orange-400 ' : ' border-gray-200 ')} onClick={onClick} >\n            <h2 className=\"font-medium\">{board.name}</h2>\n            <div className=\"last-active\" className=\"font-book text-blue-700\"><a target=\"_blank\" rel=\"noopener noreferrer\" href={board.url}>{new Date(board.dateLastActivity).toLocaleString()}</a></div>\n        </div>\n    </div>\n);\n\nexport default RenderBoard","/**\n * Function to sort boards, currently reverse last activity date.\n * @param {array[Object]} arr\n*/\nconst sortBoard = (arr) => (\n    arr.sort((a, b) => (new Date(b.dateLastActivity) - new Date(a.dateLastActivity)))\n)\n\nexport default sortBoard;","const boardProps = (selectedBoards,x) => {\n    let bProps = { isSelected: false };\n\n    if (selectedBoards.some(e => e.id === x.id)) {\n        bProps.isSelected = true;\n    }\n    return bProps;\n}\n\nexport default boardProps;","import React from 'react';\n\n\nimport getElementByProperty from '../components/functions/getElementByProperty'\nimport useGetData from '../hooks/useGetData';\nimport ListItem from './listItem';\nimport RenderBoard from '../render/boardAsListItem';\nimport sortBoard from './functions/sortBoard';\nimport boardProps from './functions/propGenerators/boardAsListItemProps';\n\n\nconst BoardSelection = (props) => {\n\n    /** \n  *  <Board selection event handlers, sorting, render>\n  */\n\n    /**\n     * boardClicked event handler, we want to change the state of our selectedBoards to either \n     * add or remove whichever board has been clicked.\n     * @param {*} board the board we've just clicked. \n     */\n    const boardClicked = (board) => {\n        const idx = props.selectedBoards.map(e => e.id).indexOf(board.id);\n        if (idx > -1) {\n            //App knows board of id IS NOT selected now      \n            props.setSelectedBoards(props.selectedBoards.filter(item => item.id !== board.id));\n        } else {\n            ///App knows board of id IS selected now      \n            props.setSelectedBoards(props.selectedBoards.concat([board]));\n        }\n    }\n\n    \n    const BoardListItem = (props) => ListItem(props, { 'onClick': [boardClicked], 'onSelected': [] });\n    \n    const BoardProps = (x) => ( boardProps(props.selectedBoards, x))\n    /**\n    *  </Board selection event handlers, sorting, render>\n    */\n\n\n\n    //Get our boards and map according to the parameters we've just decided.\n    const getData = useGetData(props.boardsFetch.error, props.boardsFetch.isLoading, props.boardsFetch.data, BoardListItem, RenderBoard, sortBoard, BoardProps);\n\n    return(\n        getData\n    )\n} \n\nexport default BoardSelection;","/**\n * Given a source array of objects, an output array of objects\n * and the names of their respective properties, will remove the\n * items from outputItems that should no longer be there.\n * Useful in this project for filtering out lists from boards that are\n * no longer selected.\n * @param {Object[][]} sourceItemsArr \n * @param {Object[][]} outputItemsArr\n * @param {string} sourceProperty property to compare against on the source items\n * @param {string} outputProperty property to compare against on the output items\n */\nconst cleanUpByCompare = (sourceItemsArr, outputItemsArr, sourceProperty, outputProperty) => {\n    return outputItemsArr.map(outputItem => {\n        let found = false;\n        for (let i = 0; i < sourceItemsArr.length; i++) {\n            if (outputItem[outputProperty] == sourceItemsArr[i][sourceProperty]) {\n                found = true;\n                break;\n            }\n        }\n        if (found) {\n            return outputItem;\n        }\n    }).filter(Boolean);\n}\n\n\nexport default cleanUpByCompare","import React, {useState, useRef} from 'react';\nimport RenderModal from './renderModal';\n\nconst RenderSettings = (props) => (\n    <RenderModal>\n        <div className=\"w-full flex my-2 flex-wrap \">\n            <div className=\"text-lg text-gray-700 font-bold pb-4 w-full flex\">\n                <h2 className=\"flex-1 text-left\">Edit API Key</h2>\n                <button onClick={props.close} className={\"align-right font-light px-2 rounded border-gray-100 deg45 font-bold text-xl select-none\"}>+</button>\n            </div>\n            \n            <div className=\"w-full flex flex-wrap mb-4\">\n                <label htmlFor=\"trelloToken\" className=\"w-full self-center pt-4 text-left text-gray-500 font-bold\">Trello Token</label>\n                <p className=\"font-light text-md text-left text-gray-700 my-2\">Leave blank and click save to restore to default.</p>\n\n                <input ref={props.apiRef} defaultValue={props.ApiKey} className=\"flex-1 w-full max-w-full bg-white focus:outline-none focus:shadow-outline border border-gray-300 rounded-lg py-2 px-4 leading-normal w-full\" name=\"trelloToken\" type=\"text\"></input>\n            </div>\n            <button onClick={props.stash} className=\"hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-2 border border-blue-500 hover:border-transparent rounded border-box text-sm\">\n                Save\n            </button>\n        </div>\n    </RenderModal>\n)\nconst Login = (props) => {\n    const [showSettings, setShowSettings] = useState(false);\n    const apiRef = useRef(null);\n    return(\n        <React.Fragment>\n            {showSettings && \n                <RenderSettings \n                    apiRef={apiRef} \n                    ApiKey={props.ApiKey} \n                    close={ () => setShowSettings(!showSettings)} \n                    stash={ () => {props.setKey(apiRef.current.value); setShowSettings(!showSettings) }}\n                />\n            }\n            <div className=\"flex-1 overflow-auto max-w-xl self-center flex w-full\">\n\n                <div className=\"bg-white flex-0 self-center p-8 pb-4 rounded w-full sm:1/3\">\n                    <div className=\"w-full font-bold text-left\">\n                        {props.fetchData.error && props.ApiToken &&\n                            <div className=\"rounded px-2 mb-2 w-full bg-red-400 text-lg text-white font-medium\">! Error, credentials incorrect - could not connect to Trello!</div>\n                        }\n                        <h1 className=\"text-2xl\">Trelloverview</h1>\n                        <h2 className=\"text-xl text-gray-500\">Welcome!</h2>\n                        <p className=\"font-light text-lg text-gray-700\">Trelloverview allows you to route boards to custom lists ('pots'), allowing you to see the contents of multiple boards at a glance.</p>\n                        <p className=\"font-light text-lg text-gray-700 mt-2\">In order to use this service, please enter a valid Trello API token. If you have not generated a token for this app (and API key) already, you can generate one by clicking the 'Generate Token' button and following\n                            the instructions. Once you have generated a token, you can copy the token, close that tab/window, and paste it in the box below. </p>\n                        <p className=\"font-light text-md text-gray-500 mt-2\">In the event of too many users using the default API key at once, it may be desirable to use a custom one. It is recommended that if you generate your own API key, you create a new account to do so. If you have changed the API Key, you will need to generate a new token too.</p>\n                    </div>\n\n                    <div className=\"pt-8 justify-start text-left justify-between flex\">\n                        <a className=\"hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-2 border border-blue-500 hover:border-transparent rounded border-box text-sm\"\n                            target=\"_blank\" rel=\"noopener noreferrer\" href={\"https://trello.com/1/authorize?expiration=30days&name=Trelloverview&scope=read&response_type=token&key=\"+props.ApiKey}>Generate Token</a>\n                        <button className=\"hover:bg-gray-500 text-gray-500 font-semibold hover:text-white py-1 px-1 border border-gray-300 hover:border-transparent rounded border-box text-sm self-center\"\n                            onClick={(e) => { e.preventDefault(); setShowSettings(!showSettings)} }>Enter custom API Key</button>\n                    </div>\n\n                    <div className=\"w-full flex my-2 flex-wrap\">\n                        <label htmlFor=\"trelloToken\" className=\"w-full self-center pt-4 text-left text-gray-500 font-bold\">Trello Token</label>\n                        <input onBlur={(e) => props.stash(e.target.value)} className=\"flex-1 w-full max-w-full bg-white focus:outline-none focus:shadow-outline border border-gray-300 rounded-lg py-2 px-4 leading-normal\" name=\"trelloToken\" type=\"text\"></input>\n                    </div>\n\n                    {!props.fetchData.error && props.ApiToken &&\n\n                        <div className=\"w-full flex text-right justify-end\">\n                            <button\n                                onClick={(props.handleProgressStage)}\n                                className=\"self-center hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-2 border border-blue-500 hover:border-transparent rounded border-box\">Next</button>\n                        </div>\n                    }\n\n                    <div className=\"w-full font-bold text-left border-t border-gray-300 mt-8\">\n                        <p className=\"font-bold text-gray-400 mt-2 text-sm \">\n                            Made with ❤️ by  <a  className=\"underline\" target=\"_blank\" href=\"https://thomasbarratt.co.uk\">Thomas Barratt</a>. \n                            <a target=\"_blank\" href=\"https://github.com/thomas1151/trelloverview\" rel=\"noreferrer noopener\" \n                                className=\"hover:text-blue-500 text-blue-300 font-semibold px-1 hover:border-transparent rounded border-box text-sm font-light\">Github</a> </p>\n                    </div>\n\n\n\n                </div>\n            </div>\n        </React.Fragment>\n\n    )\n}\n\nexport default Login;","import React, { useEffect, useState } from 'react';\nimport './assets/styles/css/App.css';\nimport  ListItem from './components/listItem';\nimport useFetch from './hooks/useFetch';\nimport useGetData from './hooks/useGetData';\nimport SelectLists from './views/selectLists';\nimport Board from './components/board';\nimport renderHeaderFn from './render/header';\nimport useLocalStorageTokenManagement from './hooks/useLocalStorageTokenManagement';\nimport renderOverview from './render/boardOverview';\nimport BoardSelection from './components/boardSelection';\nimport boardProps from './components/functions/propGenerators/boardAsListItemProps';\nimport sortBoard from './components/functions/sortBoard';\nimport cleanUpByCompare from './components/functions/cleanUpByCompare';\nimport Login from './render/login';\n\n\n\nfunction App() {\n  //Trello generated key and token.\n\n  /**\n   * We need a key, token, selectedBoards and our selected pots to be able to show the user their boards\n   */\n  // const [key, setKey] = useState(localStorage.getItem('trelloKey') || \"30581530286d16003f643e0ffa4c1700\");\n  // const [token, setToken] = useState(localStorage.getItem('trelloToken') );\n  const [selectedBoards, setSelectedBoards] = useState(JSON.parse(localStorage.getItem('selectedBoards')) || []);\n  const [activePots, setActivePots] = useState(JSON.parse(localStorage.getItem('activePots')) || []);\n\n  /**\n   * Pot logic\n   */\n  const [potsCleaned, setPotsCleaned] = useState(false);\n  \n  /**\n   * This removes any lists that may still be kicking around despite not being selected anymore.\n   * Getting rid of these means that if the user was to select the list again, the config wouldn't magically reappear,\n   * and that the overview display wouldn't try and show dead lists.\n   */\n  const potsCleanup = () => {\n    if (activePots){\n      let r = activePots.map(pot => {\n        pot.lists = cleanUpByCompare(selectedBoards, pot.lists, 'id', 'idBoard');\n        return pot;\n      })\n      setActivePots(r);\n    }else{\n      setActivePots([]);\n    }\n    setPotsCleaned(true);\n  }\n\n  useEffect(() => {\n    setPotsCleaned(false);\n  }, [selectedBoards])\n  useEffect(() => {\n    if (!potsCleaned) {\n      potsCleanup();\n    }\n  }, [potsCleaned])\n\n\n\n  useEffect(() => {\n    localStorage.setItem('selectedBoards', JSON.stringify(selectedBoards));\n  }, [selectedBoards, activePots])\n\n  useEffect(() => {\n    localStorage.setItem('activePots', JSON.stringify(activePots));\n  }, [selectedBoards, activePots])\n\n\n  //cleanUpPots();\n  const {stash, revoke, isStashed, token, key, setKey} = useLocalStorageTokenManagement();\n  \n  //Gets a list of all the boards the user has access to, based on the generated key and token.\n  let fetchData = useFetch('https://api.trello.com/1/members/me/boards?key=' + key + '&token=' + token, [token]);\n  \n  /**\n    <Stage handling logic>\n  **/\n  const stages = ['addTrelloDetails','selectBoard','selectLists','overview'];\n  const chooseState = () => (token && !fetchData.error ?\n    localStorage.getItem('selectedBoards') && JSON.parse(localStorage.getItem('selectedBoards')).length > 0 ?\n      (localStorage.getItem('activePots') && JSON.parse(localStorage.getItem('activePots')).length > 0 ?\n        stages[stages.indexOf('overview')] :\n        stages[stages.indexOf('selectLists')])\n      : stages[stages.indexOf('selectBoard')]\n    :\n    stages[0])\n  const [stage, setStage] = useState(chooseState);\n  \n  useEffect(() => {\n    switch( stage ){\n      case 'addTrelloDetails':\n        revoke()\n        break;\n    }\n  }, [stage])\n\n  //Let us just use the slug to generate a title.\n  let stageAsTitle = stage.replace(/([A-Z])/g, \" $1\")\n  stageAsTitle = stageAsTitle.charAt(0).toUpperCase() + stageAsTitle.slice(1);\n\n  const handleProgressStage = (regress=false) => {\n    switch (stage) {\n      case 'addTrelloDetails':\n\n\n        break;\n      case 'selectBoard':\n        // localStorage.setItem('selectedBoards', JSON.stringify(selectedBoards));\n        break;\n      case 'selectLists':\n        // localStorage.setItem('activePots', JSON.stringify(activePots));\n        break;\n\n    }\n    setStage(stages[stages.indexOf(stage) + 1])\n  }\n\n  /**\n   * Reinitialises the boards and pots to have nothing in.\n   * Given a stage will try and route the user there.\n   * @param {*} stage \n   */\n  const restart = (stage = 'selectBoard') => {\n    setSelectedBoards([]);\n    setActivePots([]);\n    setStage(stage);\n  }\n\n  /**\n   * Uses the curried restart function to restart back to the add token screen. \n   */\n  const logOut = () => (restart('addTrelloDetails'))\n  /**\n    </StageHandlingLogic>\n  */\n\n  // complete the boardProps by passing selectedBoards.\n  const BoardProps = (x) => (boardProps(selectedBoards, x))\n\n  return (\n    <div className=\"App bg-gray-100 h-full flex flex-wrap flex-col\">\n      {renderHeaderFn(stages, stage, setStage, stageAsTitle, logOut, restart)}\n\n      {stage === 'addTrelloDetails' &&\n        <Login ApiKey={key} ApiToken={token} stash={stash} fetchData={fetchData} handleProgressStage={handleProgressStage} setKey={setKey} />\n      }\n      \n      {stage === 'selectBoard' &&\n        \n        <React.Fragment>\n        <div className={\"boards-wrapper flex flex-1 overflow-auto flex-wrap \"+(selectedBoards.length > 0 && 'mb-20')}>\n          <BoardSelection setSelectedBoards={setSelectedBoards} selectedBoards={selectedBoards} boardsFetch={fetchData} />\n        </div>\n\n        {selectedBoards.length > 0 &&\n          <div className=\"next w-full fixed bottom-0 flex flex-wrap border-t-4 border-blue-500 bg-white p-4\">\n\n            <p className=\"flex-1 text-left self-center text-sm\">\n              {selectedBoards.length} board(s) selected.\n              Click next to select lists.                \n            </p>\n            <div className=\"w-full sm:w-auto flex justify-between\">\n              <button className=\"hover:bg-gray-500 text-gray-700 font-book hover:text-white py-2 px-4 border border-gray-500 hover:border-transparent rounded mx-2 text-sm\"\n                onClick={() => (restart())}>Clear selected boards</button>\n\n              <button className=\"hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded mx-2\"\n                onClick={handleProgressStage}>Next</button>\n            </div>\n\n\n          </div>\n        }\n        </React.Fragment>\n      }\n\n      {stage === 'selectLists' &&\n        <React.Fragment>\n        <div className={\"lists-wrapper flex flex-1 overflow-auto flex-wrap flex-row \" + (activePots.length > 0 && \"mb-20\")}>\n            <SelectLists setActivePots={setActivePots} activePots={activePots} ApiKey={key} ApiToken={token} selectedBoards={selectedBoards} boardSortFn={sortBoard} boardProps={BoardProps}/>\n          </div>\n\n          { activePots.length > 0 &&\n            <div className=\"next w-full fixed bottom-0 flex flex-wrap border-t-4 border-blue-500 bg-white p-4\">\n              <p className=\"flex-1 text-left self-center text-sm\">\n                 list(s) over {activePots.length} pot(s) selected.\n              </p>\n              <div className=\"w-full sm:w-auto flex justify-between\">\n                <button className=\"hover:bg-gray-500 text-gray-700 font-book hover:text-white py-2 px-4 border border-gray-500 hover:border-transparent rounded mx-2 text-sm\"\n                  onClick={() => (setSelectedBoards([]))}>Remove all pots.</button>\n\n                <button className=\"hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded mx-2\"\n                  onClick={handleProgressStage}>Show overview</button>\n              </div>\n\n            </div>\n          }\n        </React.Fragment>\n      }\n\n\n      {stage === 'overview' &&\n        <React.Fragment>\n          <Board\n            activePots={activePots}\n            setActivePots= {setActivePots}\n            renderFn={renderOverview}\n            ApiKey={key} ApiToken={token}\n            selectedBoards = {selectedBoards}\n          />\n          \n        </React.Fragment>\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}